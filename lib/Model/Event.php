<?php
/**
 * Event
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Ship24\TrackingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship24 Tracking API
 *
 * ## Getting started  Make sure to read the [Getting started](https://docs.ship24.com/getting-started) section of our [API Documentation](https://docs.ship24.com/) before using the endpoints presented below. ## Documentation structure  Use the top navigation bar to switch from:  - Our [API Documentation](https://docs.ship24.com/), which contains a comprehensive explanation of how our API works. - Our [API Reference](https://docs.ship24.com/tracking-api-reference/), which contains the specification of each of our endpoints. - Our [Support](https://docs.ship24.com/support/introduction) section, which contains help articles for most of the common questions and issues you may encounter.  ## Import our documentation into your HTTP client  Our API Reference is available as an Open API 3.1 format file, which is supported by most HTTP clients.  - Latest version: https://docs.ship24.com/assets/openapi/ship24-tracking-api.yaml  | <!-- -->                                                     | <!-- -->                                                                                                                                                     | | ------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | | ![Postman](/img/postman-logo.svg) Postman                    | In Postman, click on \"Import\", go on the \"Link\" tab, and paste this URL `https://docs.ship24.com/assets/openapi/ship24-tracking-api.yaml`                           | | <img src=\"/img/insomnia-logo.png\" width=\"32\"></img> Insomnia | From Insomnia preferences, locate the \"Import data\" option, choose \"From URL\", and paste this URL `https://docs.ship24.com/assets/openapi/ship24-tracking-api.yaml` |
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ship24\TrackingApi\Model;

use \ArrayAccess;
use \Ship24\TrackingApi\ObjectSerializer;

/**
 * Event Class Doc Comment
 *
 * @category Class
 * @package  Ship24\TrackingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Event implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'event_id' => 'string',
        'tracking_number' => 'string',
        'event_tracking_number' => 'string',
        'status' => 'string',
        'occurrence_datetime' => 'string',
        'order' => 'int',
        'location' => 'string',
        'source_code' => 'string',
        'courier_code' => 'string',
        'status_code' => 'string',
        'status_category' => 'string',
        'status_milestone' => 'string',
        'datetime' => '\DateTime',
        'utc_offset' => 'string',
        'has_no_time' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'event_id' => null,
        'tracking_number' => null,
        'event_tracking_number' => null,
        'status' => null,
        'occurrence_datetime' => 'logistic-date-time',
        'order' => null,
        'location' => null,
        'source_code' => null,
        'courier_code' => null,
        'status_code' => null,
        'status_category' => null,
        'status_milestone' => null,
        'datetime' => 'date-time',
        'utc_offset' => null,
        'has_no_time' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'event_id' => false,
        'tracking_number' => false,
        'event_tracking_number' => false,
        'status' => false,
        'occurrence_datetime' => false,
        'order' => true,
        'location' => true,
        'source_code' => true,
        'courier_code' => true,
        'status_code' => true,
        'status_category' => true,
        'status_milestone' => false,
        'datetime' => false,
        'utc_offset' => false,
        'has_no_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_id' => 'eventId',
        'tracking_number' => 'trackingNumber',
        'event_tracking_number' => 'eventTrackingNumber',
        'status' => 'status',
        'occurrence_datetime' => 'occurrenceDatetime',
        'order' => 'order',
        'location' => 'location',
        'source_code' => 'sourceCode',
        'courier_code' => 'courierCode',
        'status_code' => 'statusCode',
        'status_category' => 'statusCategory',
        'status_milestone' => 'statusMilestone',
        'datetime' => 'datetime',
        'utc_offset' => 'utcOffset',
        'has_no_time' => 'hasNoTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_id' => 'setEventId',
        'tracking_number' => 'setTrackingNumber',
        'event_tracking_number' => 'setEventTrackingNumber',
        'status' => 'setStatus',
        'occurrence_datetime' => 'setOccurrenceDatetime',
        'order' => 'setOrder',
        'location' => 'setLocation',
        'source_code' => 'setSourceCode',
        'courier_code' => 'setCourierCode',
        'status_code' => 'setStatusCode',
        'status_category' => 'setStatusCategory',
        'status_milestone' => 'setStatusMilestone',
        'datetime' => 'setDatetime',
        'utc_offset' => 'setUtcOffset',
        'has_no_time' => 'setHasNoTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_id' => 'getEventId',
        'tracking_number' => 'getTrackingNumber',
        'event_tracking_number' => 'getEventTrackingNumber',
        'status' => 'getStatus',
        'occurrence_datetime' => 'getOccurrenceDatetime',
        'order' => 'getOrder',
        'location' => 'getLocation',
        'source_code' => 'getSourceCode',
        'courier_code' => 'getCourierCode',
        'status_code' => 'getStatusCode',
        'status_category' => 'getStatusCategory',
        'status_milestone' => 'getStatusMilestone',
        'datetime' => 'getDatetime',
        'utc_offset' => 'getUtcOffset',
        'has_no_time' => 'getHasNoTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('event_id', $data ?? [], null);
        $this->setIfExists('tracking_number', $data ?? [], null);
        $this->setIfExists('event_tracking_number', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('occurrence_datetime', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('source_code', $data ?? [], null);
        $this->setIfExists('courier_code', $data ?? [], null);
        $this->setIfExists('status_code', $data ?? [], null);
        $this->setIfExists('status_category', $data ?? [], null);
        $this->setIfExists('status_milestone', $data ?? [], null);
        $this->setIfExists('datetime', $data ?? [], null);
        $this->setIfExists('utc_offset', $data ?? [], null);
        $this->setIfExists('has_no_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event_id
     *
     * @return string|null
     */
    public function getEventId()
    {
        return $this->container['event_id'];
    }

    /**
     * Sets event_id
     *
     * @param string|null $event_id Unique identifier of the event in Ship24 system.
     *
     * @return self
     */
    public function setEventId($event_id)
    {
        if (is_null($event_id)) {
            throw new \InvalidArgumentException('non-nullable event_id cannot be null');
        }
        $this->container['event_id'] = $event_id;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string|null
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string|null $tracking_number The original tracking number used to create the Tracker.
     *
     * @return self
     */
    public function setTrackingNumber($tracking_number)
    {
        if (is_null($tracking_number)) {
            throw new \InvalidArgumentException('non-nullable tracking_number cannot be null');
        }
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets event_tracking_number
     *
     * @return string|null
     */
    public function getEventTrackingNumber()
    {
        return $this->container['event_tracking_number'];
    }

    /**
     * Sets event_tracking_number
     *
     * @param string|null $event_tracking_number The tracking number associated with the event, on which the event has been found.
     *
     * @return self
     */
    public function setEventTrackingNumber($event_tracking_number)
    {
        if (is_null($event_tracking_number)) {
            throw new \InvalidArgumentException('non-nullable event_tracking_number cannot be null');
        }
        $this->container['event_tracking_number'] = $event_tracking_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Event raw text.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets occurrence_datetime
     *
     * @return string|null
     */
    public function getOccurrenceDatetime()
    {
        return $this->container['occurrence_datetime'];
    }

    /**
     * Sets occurrence_datetime
     *
     * @param string|null $occurrence_datetime [Date and time](http://docs.ship24.com/data-format#logistics-date-and-time) at which the event occurred.
     *
     * @return self
     */
    public function setOccurrenceDatetime($occurrence_datetime)
    {
        if (is_null($occurrence_datetime)) {
            throw new \InvalidArgumentException('non-nullable occurrence_datetime cannot be null');
        }
        $this->container['occurrence_datetime'] = $occurrence_datetime;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order Indicate the order of the events in case the occurrenceDatetime is the same between multiple events (lower is older).
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            array_push($this->openAPINullablesSetToNull, 'order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location Location raw text of the event.
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets source_code
     *
     * @return string|null
     */
    public function getSourceCode()
    {
        return $this->container['source_code'];
    }

    /**
     * Sets source_code
     *
     * @param string|null $source_code Internal code of the source used to get this event. Please note that those codes may evolve at any point in time.
     *
     * @return self
     */
    public function setSourceCode($source_code)
    {
        if (is_null($source_code)) {
            array_push($this->openAPINullablesSetToNull, 'source_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source_code'] = $source_code;

        return $this;
    }

    /**
     * Gets courier_code
     *
     * @return string|null
     */
    public function getCourierCode()
    {
        return $this->container['courier_code'];
    }

    /**
     * Sets courier_code
     *
     * @param string|null $courier_code Code of the courier linked to this event, refers to our Couriers list. Please note that those codes may evolve at any point in time.
     *
     * @return self
     */
    public function setCourierCode($courier_code)
    {
        if (is_null($courier_code)) {
            array_push($this->openAPINullablesSetToNull, 'courier_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('courier_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['courier_code'] = $courier_code;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return string|null
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param string|null $status_code [statusCode](https://docs.ship24.com/status/#statuscode-and-statuscategory) of the event.
     *
     * @return self
     */
    public function setStatusCode($status_code)
    {
        if (is_null($status_code)) {
            array_push($this->openAPINullablesSetToNull, 'status_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets status_category
     *
     * @return string|null
     */
    public function getStatusCategory()
    {
        return $this->container['status_category'];
    }

    /**
     * Sets status_category
     *
     * @param string|null $status_category [statusCategory](https://docs.ship24.com/status/#statuscode-and-statuscategory) of the event.
     *
     * @return self
     */
    public function setStatusCategory($status_category)
    {
        if (is_null($status_category)) {
            array_push($this->openAPINullablesSetToNull, 'status_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status_category'] = $status_category;

        return $this;
    }

    /**
     * Gets status_milestone
     *
     * @return string|null
     */
    public function getStatusMilestone()
    {
        return $this->container['status_milestone'];
    }

    /**
     * Sets status_milestone
     *
     * @param string|null $status_milestone [statusMilestone](https://docs.ship24.com/status/#statusmilestone) of the shipment at the time of the event.
     *
     * @return self
     */
    public function setStatusMilestone($status_milestone)
    {
        if (is_null($status_milestone)) {
            throw new \InvalidArgumentException('non-nullable status_milestone cannot be null');
        }
        $this->container['status_milestone'] = $status_milestone;

        return $this;
    }

    /**
     * Gets datetime
     *
     * @return \DateTime|null
     * @deprecated
     */
    public function getDatetime()
    {
        return $this->container['datetime'];
    }

    /**
     * Sets datetime
     *
     * @param \DateTime|null $datetime datetime
     *
     * @return self
     * @deprecated
     */
    public function setDatetime($datetime)
    {
        if (is_null($datetime)) {
            throw new \InvalidArgumentException('non-nullable datetime cannot be null');
        }
        $this->container['datetime'] = $datetime;

        return $this;
    }

    /**
     * Gets utc_offset
     *
     * @return string|null
     * @deprecated
     */
    public function getUtcOffset()
    {
        return $this->container['utc_offset'];
    }

    /**
     * Sets utc_offset
     *
     * @param string|null $utc_offset utc_offset
     *
     * @return self
     * @deprecated
     */
    public function setUtcOffset($utc_offset)
    {
        if (is_null($utc_offset)) {
            throw new \InvalidArgumentException('non-nullable utc_offset cannot be null');
        }
        $this->container['utc_offset'] = $utc_offset;

        return $this;
    }

    /**
     * Gets has_no_time
     *
     * @return bool|null
     * @deprecated
     */
    public function getHasNoTime()
    {
        return $this->container['has_no_time'];
    }

    /**
     * Sets has_no_time
     *
     * @param bool|null $has_no_time has_no_time
     *
     * @return self
     * @deprecated
     */
    public function setHasNoTime($has_no_time)
    {
        if (is_null($has_no_time)) {
            throw new \InvalidArgumentException('non-nullable has_no_time cannot be null');
        }
        $this->container['has_no_time'] = $has_no_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


