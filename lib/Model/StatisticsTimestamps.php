<?php
/**
 * StatisticsTimestamps
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Ship24\TrackingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship24 Tracking API
 *
 * ## Getting started  Make sure to read the [Getting started](https://docs.ship24.com/getting-started) section of our [API Documentation](https://docs.ship24.com/) before using the endpoints presented below. ## Documentation structure  Use the top navigation bar to switch from:  - Our [API Documentation](https://docs.ship24.com/), which contains a comprehensive explanation of how our API works. - Our [API Reference](https://docs.ship24.com/tracking-api-reference/), which contains the specification of each of our endpoints. - Our [Support](https://docs.ship24.com/support/introduction) section, which contains help articles for most of the common questions and issues you may encounter.  ## Import our documentation into your HTTP client  Our API Reference is available as an Open API 3.1 format file, which is supported by most HTTP clients.  - Latest version: https://docs.ship24.com/assets/openapi/ship24-tracking-api.yaml  | <!-- -->                                                     | <!-- -->                                                                                                                                                     | | ------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | | ![Postman](/img/postman-logo.svg) Postman                    | In Postman, click on \"Import\", go on the \"Link\" tab, and paste this URL `https://docs.ship24.com/assets/openapi/ship24-tracking-api.yaml`                           | | <img src=\"/img/insomnia-logo.png\" width=\"32\"></img> Insomnia | From Insomnia preferences, locate the \"Import data\" option, choose \"From URL\", and paste this URL `https://docs.ship24.com/assets/openapi/ship24-tracking-api.yaml` |
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ship24\TrackingApi\Model;

use \ArrayAccess;
use \Ship24\TrackingApi\ObjectSerializer;

/**
 * StatisticsTimestamps Class Doc Comment
 *
 * @category Class
 * @description Date and time of the occurrence of each milestone of the shipment.  [Date and time Format](https://docs.ship24.com/data-format#logistics-date-and-time)  [List of Milestones](https://docs.ship24.com/status/#statusmilestone)
 * @package  Ship24\TrackingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StatisticsTimestamps implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'statistics_timestamps';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'info_received_datetime' => 'string',
        'in_transit_datetime' => 'string',
        'out_for_delivery_datetime' => 'string',
        'failed_attempt_datetime' => 'string',
        'available_for_pickup_datetime' => 'string',
        'exception_datetime' => 'string',
        'delivered_datetime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'info_received_datetime' => 'logistic-date-time',
        'in_transit_datetime' => 'logistic-date-time',
        'out_for_delivery_datetime' => 'logistic-date-time',
        'failed_attempt_datetime' => 'logistic-date-time',
        'available_for_pickup_datetime' => 'logistic-date-time',
        'exception_datetime' => 'logistic-date-time',
        'delivered_datetime' => 'logistic-date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'info_received_datetime' => true,
        'in_transit_datetime' => true,
        'out_for_delivery_datetime' => true,
        'failed_attempt_datetime' => true,
        'available_for_pickup_datetime' => true,
        'exception_datetime' => true,
        'delivered_datetime' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'info_received_datetime' => 'infoReceivedDatetime',
        'in_transit_datetime' => 'inTransitDatetime',
        'out_for_delivery_datetime' => 'outForDeliveryDatetime',
        'failed_attempt_datetime' => 'failedAttemptDatetime',
        'available_for_pickup_datetime' => 'availableForPickupDatetime',
        'exception_datetime' => 'exceptionDatetime',
        'delivered_datetime' => 'deliveredDatetime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'info_received_datetime' => 'setInfoReceivedDatetime',
        'in_transit_datetime' => 'setInTransitDatetime',
        'out_for_delivery_datetime' => 'setOutForDeliveryDatetime',
        'failed_attempt_datetime' => 'setFailedAttemptDatetime',
        'available_for_pickup_datetime' => 'setAvailableForPickupDatetime',
        'exception_datetime' => 'setExceptionDatetime',
        'delivered_datetime' => 'setDeliveredDatetime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'info_received_datetime' => 'getInfoReceivedDatetime',
        'in_transit_datetime' => 'getInTransitDatetime',
        'out_for_delivery_datetime' => 'getOutForDeliveryDatetime',
        'failed_attempt_datetime' => 'getFailedAttemptDatetime',
        'available_for_pickup_datetime' => 'getAvailableForPickupDatetime',
        'exception_datetime' => 'getExceptionDatetime',
        'delivered_datetime' => 'getDeliveredDatetime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('info_received_datetime', $data ?? [], null);
        $this->setIfExists('in_transit_datetime', $data ?? [], null);
        $this->setIfExists('out_for_delivery_datetime', $data ?? [], null);
        $this->setIfExists('failed_attempt_datetime', $data ?? [], null);
        $this->setIfExists('available_for_pickup_datetime', $data ?? [], null);
        $this->setIfExists('exception_datetime', $data ?? [], null);
        $this->setIfExists('delivered_datetime', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets info_received_datetime
     *
     * @return string|null
     */
    public function getInfoReceivedDatetime()
    {
        return $this->container['info_received_datetime'];
    }

    /**
     * Sets info_received_datetime
     *
     * @param string|null $info_received_datetime Occurrence [date and time](https://docs.ship24.com/data-format#logistics-date-and-time) of the first `info_received` [milestone](https://docs.ship24.com/status/#statusmilestone).
     *
     * @return self
     */
    public function setInfoReceivedDatetime($info_received_datetime)
    {
        if (is_null($info_received_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'info_received_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('info_received_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['info_received_datetime'] = $info_received_datetime;

        return $this;
    }

    /**
     * Gets in_transit_datetime
     *
     * @return string|null
     */
    public function getInTransitDatetime()
    {
        return $this->container['in_transit_datetime'];
    }

    /**
     * Sets in_transit_datetime
     *
     * @param string|null $in_transit_datetime Occurrence [date and time](https://docs.ship24.com/data-format#logistics-date-and-time) of the first `in_transit` [milestone](https://docs.ship24.com/status/#statusmilestone).
     *
     * @return self
     */
    public function setInTransitDatetime($in_transit_datetime)
    {
        if (is_null($in_transit_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'in_transit_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('in_transit_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['in_transit_datetime'] = $in_transit_datetime;

        return $this;
    }

    /**
     * Gets out_for_delivery_datetime
     *
     * @return string|null
     */
    public function getOutForDeliveryDatetime()
    {
        return $this->container['out_for_delivery_datetime'];
    }

    /**
     * Sets out_for_delivery_datetime
     *
     * @param string|null $out_for_delivery_datetime Occurrence [date and time](https://docs.ship24.com/data-format#logistics-date-and-time) of the first `out_for_delivery` [milestone](https://docs.ship24.com/status/#statusmilestone).
     *
     * @return self
     */
    public function setOutForDeliveryDatetime($out_for_delivery_datetime)
    {
        if (is_null($out_for_delivery_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'out_for_delivery_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('out_for_delivery_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['out_for_delivery_datetime'] = $out_for_delivery_datetime;

        return $this;
    }

    /**
     * Gets failed_attempt_datetime
     *
     * @return string|null
     */
    public function getFailedAttemptDatetime()
    {
        return $this->container['failed_attempt_datetime'];
    }

    /**
     * Sets failed_attempt_datetime
     *
     * @param string|null $failed_attempt_datetime Occurrence [date and time](https://docs.ship24.com/data-format#logistics-date-and-time) of the first `failed_attempt` [milestone](https://docs.ship24.com/status/#statusmilestone).
     *
     * @return self
     */
    public function setFailedAttemptDatetime($failed_attempt_datetime)
    {
        if (is_null($failed_attempt_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'failed_attempt_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('failed_attempt_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['failed_attempt_datetime'] = $failed_attempt_datetime;

        return $this;
    }

    /**
     * Gets available_for_pickup_datetime
     *
     * @return string|null
     */
    public function getAvailableForPickupDatetime()
    {
        return $this->container['available_for_pickup_datetime'];
    }

    /**
     * Sets available_for_pickup_datetime
     *
     * @param string|null $available_for_pickup_datetime Occurrence [date and time](https://docs.ship24.com/data-format#logistics-date-and-time) of the first `available_for_pickup` [milestone](https://docs.ship24.com/status/#statusmilestone).
     *
     * @return self
     */
    public function setAvailableForPickupDatetime($available_for_pickup_datetime)
    {
        if (is_null($available_for_pickup_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'available_for_pickup_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('available_for_pickup_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['available_for_pickup_datetime'] = $available_for_pickup_datetime;

        return $this;
    }

    /**
     * Gets exception_datetime
     *
     * @return string|null
     */
    public function getExceptionDatetime()
    {
        return $this->container['exception_datetime'];
    }

    /**
     * Sets exception_datetime
     *
     * @param string|null $exception_datetime Occurrence [date and time](https://docs.ship24.com/data-format#logistics-date-and-time) of the first `exception` [milestone](https://docs.ship24.com/status/#statusmilestone).
     *
     * @return self
     */
    public function setExceptionDatetime($exception_datetime)
    {
        if (is_null($exception_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'exception_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exception_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exception_datetime'] = $exception_datetime;

        return $this;
    }

    /**
     * Gets delivered_datetime
     *
     * @return string|null
     */
    public function getDeliveredDatetime()
    {
        return $this->container['delivered_datetime'];
    }

    /**
     * Sets delivered_datetime
     *
     * @param string|null $delivered_datetime Occurrence [date and time](https://docs.ship24.com/data-format#logistics-date-and-time) of the first `delivered` [milestone](https://docs.ship24.com/status/#statusmilestone).
     *
     * @return self
     */
    public function setDeliveredDatetime($delivered_datetime)
    {
        if (is_null($delivered_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'delivered_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivered_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivered_datetime'] = $delivered_datetime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


