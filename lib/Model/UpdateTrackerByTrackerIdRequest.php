<?php
/**
 * UpdateTrackerByTrackerIdRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Ship24\TrackingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship24 Tracking API
 *
 * ## Getting started  Make sure to read the [Getting started](https://docs.ship24.com/getting-started) section of our [API Documentation](https://docs.ship24.com/) before using the endpoints presented below. ## Documentation structure  Use the top navigation bar to switch from:  - Our [API Documentation](https://docs.ship24.com/), which contains a comprehensive explanation of how our API works. - Our [API Reference](https://docs.ship24.com/tracking-api-reference/), which contains the specification of each of our endpoints. - Our [Support](https://docs.ship24.com/support/introduction) section, which contains help articles for most of the common questions and issues you may encounter.  ## Import our documentation into your HTTP client  Our API Reference is available as an Open API 3.1 format file, which is supported by most HTTP clients.  - Latest version: https://docs.ship24.com/assets/openapi/ship24-tracking-api.yaml  | <!-- -->                                                     | <!-- -->                                                                                                                                                     | | ------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | | ![Postman](/img/postman-logo.svg) Postman                    | In Postman, click on \"Import\", go on the \"Link\" tab, and paste this URL `https://docs.ship24.com/assets/openapi/ship24-tracking-api.yaml`                           | | <img src=\"/img/insomnia-logo.png\" width=\"32\"></img> Insomnia | From Insomnia preferences, locate the \"Import data\" option, choose \"From URL\", and paste this URL `https://docs.ship24.com/assets/openapi/ship24-tracking-api.yaml` |
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ship24\TrackingApi\Model;

use \ArrayAccess;
use \Ship24\TrackingApi\ObjectSerializer;

/**
 * UpdateTrackerByTrackerIdRequest Class Doc Comment
 *
 * @category Class
 * @package  Ship24\TrackingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateTrackerByTrackerIdRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'update_tracker_by_trackerId_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_subscribed' => 'bool',
        'courier_code' => 'string[]',
        'origin_country_code' => 'string',
        'destination_country_code' => 'string',
        'destination_post_code' => 'string',
        'shipping_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_subscribed' => null,
        'courier_code' => null,
        'origin_country_code' => 'ISO 3166-1 alpha-2/alpha-3',
        'destination_country_code' => 'ISO 3166-1 alpha-2/alpha-3',
        'destination_post_code' => null,
        'shipping_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_subscribed' => false,
        'courier_code' => false,
        'origin_country_code' => false,
        'destination_country_code' => false,
        'destination_post_code' => false,
        'shipping_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_subscribed' => 'isSubscribed',
        'courier_code' => 'courierCode',
        'origin_country_code' => 'originCountryCode',
        'destination_country_code' => 'destinationCountryCode',
        'destination_post_code' => 'destinationPostCode',
        'shipping_date' => 'shippingDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_subscribed' => 'setIsSubscribed',
        'courier_code' => 'setCourierCode',
        'origin_country_code' => 'setOriginCountryCode',
        'destination_country_code' => 'setDestinationCountryCode',
        'destination_post_code' => 'setDestinationPostCode',
        'shipping_date' => 'setShippingDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_subscribed' => 'getIsSubscribed',
        'courier_code' => 'getCourierCode',
        'origin_country_code' => 'getOriginCountryCode',
        'destination_country_code' => 'getDestinationCountryCode',
        'destination_post_code' => 'getDestinationPostCode',
        'shipping_date' => 'getShippingDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('is_subscribed', $data ?? [], null);
        $this->setIfExists('courier_code', $data ?? [], null);
        $this->setIfExists('origin_country_code', $data ?? [], null);
        $this->setIfExists('destination_country_code', $data ?? [], null);
        $this->setIfExists('destination_post_code', $data ?? [], null);
        $this->setIfExists('shipping_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['courier_code']) && (count($this->container['courier_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'courier_code', number of items must be less than or equal to 3.";
        }

        if (!is_null($this->container['courier_code']) && (count($this->container['courier_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'courier_code', number of items must be greater than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_subscribed
     *
     * @return bool|null
     */
    public function getIsSubscribed()
    {
        return $this->container['is_subscribed'];
    }

    /**
     * Sets is_subscribed
     *
     * @param bool|null $is_subscribed Setting at `false` will unsubscribe you from the `Tracker`. Once unsubscribed, you will still be able to fetch the existing tracking results but Ship24 won't search for new data or send webhook notifications. `Trackers` are automatically disabled after the parcel delivery or after a long period without any new events. Manually unsubscribing your tracker is not useful, except if you wish to stop receiving webhooks on it or if you need to reuse the `clientTrackerId` value in a new `Tracker`.
     *
     * @return self
     */
    public function setIsSubscribed($is_subscribed)
    {
        if (is_null($is_subscribed)) {
            throw new \InvalidArgumentException('non-nullable is_subscribed cannot be null');
        }
        $this->container['is_subscribed'] = $is_subscribed;

        return $this;
    }

    /**
     * Gets courier_code
     *
     * @return string[]|null
     */
    public function getCourierCode()
    {
        return $this->container['courier_code'];
    }

    /**
     * Sets courier_code
     *
     * @param string[]|null $courier_code Code of the courier(s) handling the shipment (Up to 3 max) (see Couriers list section)  - 📌 Recommended to improve tracking accuracy
     *
     * @return self
     */
    public function setCourierCode($courier_code)
    {
        if (is_null($courier_code)) {
            throw new \InvalidArgumentException('non-nullable courier_code cannot be null');
        }

        if ((count($courier_code) > 3)) {
            throw new \InvalidArgumentException('invalid value for $courier_code when calling UpdateTrackerByTrackerIdRequest., number of items must be less than or equal to 3.');
        }
        if ((count($courier_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $courier_code when calling UpdateTrackerByTrackerIdRequest., number of items must be greater than or equal to 0.');
        }
        $this->container['courier_code'] = $courier_code;

        return $this;
    }

    /**
     * Gets origin_country_code
     *
     * @return string|null
     */
    public function getOriginCountryCode()
    {
        return $this->container['origin_country_code'];
    }

    /**
     * Sets origin_country_code
     *
     * @param string|null $origin_country_code Sender country code.
     *
     * @return self
     */
    public function setOriginCountryCode($origin_country_code)
    {
        if (is_null($origin_country_code)) {
            throw new \InvalidArgumentException('non-nullable origin_country_code cannot be null');
        }
        $this->container['origin_country_code'] = $origin_country_code;

        return $this;
    }

    /**
     * Gets destination_country_code
     *
     * @return string|null
     */
    public function getDestinationCountryCode()
    {
        return $this->container['destination_country_code'];
    }

    /**
     * Sets destination_country_code
     *
     * @param string|null $destination_country_code Recipient country code - 📌 Recommended to improve tracking accuracy
     *
     * @return self
     */
    public function setDestinationCountryCode($destination_country_code)
    {
        if (is_null($destination_country_code)) {
            throw new \InvalidArgumentException('non-nullable destination_country_code cannot be null');
        }
        $this->container['destination_country_code'] = $destination_country_code;

        return $this;
    }

    /**
     * Gets destination_post_code
     *
     * @return string|null
     */
    public function getDestinationPostCode()
    {
        return $this->container['destination_post_code'];
    }

    /**
     * Sets destination_post_code
     *
     * @param string|null $destination_post_code Recipient Post code (or ZIP code)  - 📌 Recommended to improve tracking accuracy
     *
     * @return self
     */
    public function setDestinationPostCode($destination_post_code)
    {
        if (is_null($destination_post_code)) {
            throw new \InvalidArgumentException('non-nullable destination_post_code cannot be null');
        }
        $this->container['destination_post_code'] = $destination_post_code;

        return $this;
    }

    /**
     * Gets shipping_date
     *
     * @return \DateTime|null
     */
    public function getShippingDate()
    {
        return $this->container['shipping_date'];
    }

    /**
     * Sets shipping_date
     *
     * @param \DateTime|null $shipping_date Date at which the shipment has been shipped  - 📌 Recommended to improve tracking accuracy: providing the shipping date helps us accurately identify the shipment and improves our ability to retrieve the correct data. However, an inaccurate shipping date could cause our system to exclude the right shipment. Therefore, please ensure the provided shipping date aligns closely with the actual shipment date, give or take a few days. [Format](http://docs.ship24.com/data-format#logistics-date-and-time)
     *
     * @return self
     */
    public function setShippingDate($shipping_date)
    {
        if (is_null($shipping_date)) {
            throw new \InvalidArgumentException('non-nullable shipping_date cannot be null');
        }
        $this->container['shipping_date'] = $shipping_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


