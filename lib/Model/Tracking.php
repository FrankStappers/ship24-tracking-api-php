<?php
/**
 * Tracking
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Ship24\TrackingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship24 Tracking API
 *
 * ## Getting started  Make sure to read the [Getting started](https://docs.ship24.com/getting-started) section of our [API Documentation](https://docs.ship24.com/) before using the endpoints presented below. ## Documentation structure  Use the top navigation bar to switch from:  - Our [API Documentation](https://docs.ship24.com/), which contains a comprehensive explanation of how our API works. - Our [API Reference](https://docs.ship24.com/tracking-api-reference/), which contains the specification of each of our endpoints. - Our [Support](https://docs.ship24.com/support/introduction) section, which contains help articles for most of the common questions and issues you may encounter.  ## Import our documentation into your HTTP client  Our API Reference is available as an Open API 3.1 format file, which is supported by most HTTP clients.  - Latest version: https://docs.ship24.com/assets/openapi/ship24-tracking-api.yaml  | <!-- -->                                                     | <!-- -->                                                                                                                                                     | | ------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | | ![Postman](/img/postman-logo.svg) Postman                    | In Postman, click on \"Import\", go on the \"Link\" tab, and paste this URL `https://docs.ship24.com/assets/openapi/ship24-tracking-api.yaml`                           | | <img src=\"/img/insomnia-logo.png\" width=\"32\"></img> Insomnia | From Insomnia preferences, locate the \"Import data\" option, choose \"From URL\", and paste this URL `https://docs.ship24.com/assets/openapi/ship24-tracking-api.yaml` |
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ship24\TrackingApi\Model;

use \ArrayAccess;
use \Ship24\TrackingApi\ObjectSerializer;

/**
 * Tracking Class Doc Comment
 *
 * @category Class
 * @description A &#x60;Tracking&#x60; object is used in our API to provide tracking results on your &#x60;Trackers&#x60; . tracking results are basically updated information about a shipments, including shipment-level information, events and statistics. The &#x60;Tracking&#x60; object is used both in the response body of our endpoints, as well as in the request body of your webhooks.  A &#x60;tracking&#x60; object can be composed of the following parts: | Field | Description | | -- |   -- |   &#x60;tracker&#x60; |  In case the &#x60;tracking&#x60; is pushed by webhook and fetched from a _tracker_, the object &#x60;tracker&#x60; will be present and will refer to which _tracker_ this &#x60;tracking&#x60; results comes from. | |  &#x60;shipment&#x60; |  The object &#x60;shipment&#x60; contains the general shipment information. | |  &#x60;events&#x60;  |  The object &#x60;events&#x60; contains the tracking event(s), order by date descending (the most recent one is the first one of the array). When getting &#x60;tracking&#x60; by fetching results from our API, &#x60;events&#x60; will contains all events of the shipments. When getting &#x60;tracking&#x60; by webhooks, &#x60;events&#x60; will contains only the events discovered since the last push. | | &#x60;statistics&#x60;  |  The object &#x60;statistics&#x60; contains statistics about the shipment lifecycle, such as timestamps of the key milestones of the shipment. | | &#x60;metadata&#x60; *(in webhooks only)* | The object &#x60;metadata&#x60; contains webhooks related metadata, such as the &#x60;generatedAt&#x60; date, allowing you to know when the data contained in the webhook has been generated. |  ### &#x60;tracking&#x60; object in webhooks In the webhooks, &#x60;tracking&#x60; objects are used in a &#x60;trackings&#x60; array, directly at the root of the JSON document: &#x60;&#x60;&#x60;json {   \&quot;trackings\&quot;: [     {       \&quot;metadata\&quot;: {         \&quot;generatedAt\&quot;: \&quot;2023-01-19T09:12:39.052Z\&quot;         \&quot;messageId\&quot;: \&quot;356a7f93-3ce5-4b49-b560-156537283df9\&quot;       },       \&quot;tracker\&quot;: {         \&quot;trackerId\&quot;: \&quot;26148317-7502-d3ac-44a9-546d240ac0dd\&quot;,         \&quot;trackingNumber\&quot;: \&quot;S24DEMO456393\&quot;,         \&quot;shipmentReference\&quot;: \&quot;c6e4fef4-a816-b68f-4024-3b7e4c5a9f81\&quot;,         \&quot;clientTrackerId\&quot;: \&quot;3fa99515-3ca0-4901-85bb-056ee016799b\&quot;,         \&quot;isSubscribed\&quot;: true,         \&quot;isTracked\&quot;: true,         \&quot;createdAt\&quot;: \&quot;2021-03-10T05:13:00.000Z\&quot;       },       \&quot;shipment\&quot;: {       ... &#x60;&#x60;&#x60;  ### &#x60;tracking&#x60; object in API response In the API response,  &#x60;tracking&#x60; objects are used in a &#x60;trackings&#x60; array inside the &#x60;data&#x60; object in the JSON document: &#x60;&#x60;&#x60;json {   \&quot;data\&quot;: {     \&quot;trackings\&quot;: [       {         \&quot;tracker\&quot;: {           \&quot;trackerId\&quot;: \&quot;26148317-7502-d3ac-44a9-546d240ac0dd\&quot;,           \&quot;trackingNumber\&quot;: \&quot;S24DEMO456393\&quot;,           \&quot;shipmentReference\&quot;: \&quot;c6e4fef4-a816-b68f-4024-3b7e4c5a9f81\&quot;,           \&quot;clientTrackerId\&quot;: \&quot;3fa99515-3ca0-4901-85bb-056ee016799b\&quot;,           \&quot;isSubscribed\&quot;: true,           \&quot;isTracked\&quot;: true,           \&quot;createdAt\&quot;: \&quot;2021-03-10T05:13:00.000Z\&quot;       },       \&quot;shipment\&quot;: {       ... &#x60;&#x60;&#x60;
 * @package  Ship24\TrackingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Tracking implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'tracking';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tracker' => '\Ship24\TrackingApi\Model\Tracker',
        'shipment' => '\Ship24\TrackingApi\Model\Shipment',
        'events' => '\Ship24\TrackingApi\Model\Event[]',
        'statistics' => '\Ship24\TrackingApi\Model\Statistics',
        'metadata' => '\Ship24\TrackingApi\Model\Metadata'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tracker' => null,
        'shipment' => null,
        'events' => null,
        'statistics' => null,
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'tracker' => false,
        'shipment' => false,
        'events' => false,
        'statistics' => false,
        'metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tracker' => 'tracker',
        'shipment' => 'shipment',
        'events' => 'events',
        'statistics' => 'statistics',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tracker' => 'setTracker',
        'shipment' => 'setShipment',
        'events' => 'setEvents',
        'statistics' => 'setStatistics',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tracker' => 'getTracker',
        'shipment' => 'getShipment',
        'events' => 'getEvents',
        'statistics' => 'getStatistics',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('tracker', $data ?? [], null);
        $this->setIfExists('shipment', $data ?? [], null);
        $this->setIfExists('events', $data ?? [], null);
        $this->setIfExists('statistics', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tracker
     *
     * @return \Ship24\TrackingApi\Model\Tracker|null
     */
    public function getTracker()
    {
        return $this->container['tracker'];
    }

    /**
     * Sets tracker
     *
     * @param \Ship24\TrackingApi\Model\Tracker|null $tracker tracker
     *
     * @return self
     */
    public function setTracker($tracker)
    {
        if (is_null($tracker)) {
            throw new \InvalidArgumentException('non-nullable tracker cannot be null');
        }
        $this->container['tracker'] = $tracker;

        return $this;
    }

    /**
     * Gets shipment
     *
     * @return \Ship24\TrackingApi\Model\Shipment|null
     */
    public function getShipment()
    {
        return $this->container['shipment'];
    }

    /**
     * Sets shipment
     *
     * @param \Ship24\TrackingApi\Model\Shipment|null $shipment shipment
     *
     * @return self
     */
    public function setShipment($shipment)
    {
        if (is_null($shipment)) {
            throw new \InvalidArgumentException('non-nullable shipment cannot be null');
        }
        $this->container['shipment'] = $shipment;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \Ship24\TrackingApi\Model\Event[]|null
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \Ship24\TrackingApi\Model\Event[]|null $events events
     *
     * @return self
     */
    public function setEvents($events)
    {
        if (is_null($events)) {
            throw new \InvalidArgumentException('non-nullable events cannot be null');
        }
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets statistics
     *
     * @return \Ship24\TrackingApi\Model\Statistics|null
     */
    public function getStatistics()
    {
        return $this->container['statistics'];
    }

    /**
     * Sets statistics
     *
     * @param \Ship24\TrackingApi\Model\Statistics|null $statistics statistics
     *
     * @return self
     */
    public function setStatistics($statistics)
    {
        if (is_null($statistics)) {
            throw new \InvalidArgumentException('non-nullable statistics cannot be null');
        }
        $this->container['statistics'] = $statistics;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \Ship24\TrackingApi\Model\Metadata|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Ship24\TrackingApi\Model\Metadata|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


