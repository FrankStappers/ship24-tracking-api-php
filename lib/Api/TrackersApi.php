<?php
/**
 * TrackersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Ship24\TrackingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ship24 Tracking API
 *
 * ## Getting started  Make sure to read the [Getting started](https://docs.ship24.com/getting-started) section of our [API Documentation](https://docs.ship24.com/) before using the endpoints presented below. ## Documentation structure  Use the top navigation bar to switch from:  - Our [API Documentation](https://docs.ship24.com/), which contains a comprehensive explanation of how our API works. - Our [API Reference](https://docs.ship24.com/tracking-api-reference/), which contains the specification of each of our endpoints. - Our [Support](https://docs.ship24.com/support/introduction) section, which contains help articles for most of the common questions and issues you may encounter.  ## Import our documentation into your HTTP client  Our API Reference is available as an Open API 3.1 format file, which is supported by most HTTP clients.  - Latest version: https://docs.ship24.com/assets/openapi/ship24-tracking-api.yaml  | <!-- -->                                                     | <!-- -->                                                                                                                                                     | | ------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | | ![Postman](/img/postman-logo.svg) Postman                    | In Postman, click on \"Import\", go on the \"Link\" tab, and paste this URL `https://docs.ship24.com/assets/openapi/ship24-tracking-api.yaml`                           | | <img src=\"/img/insomnia-logo.png\" width=\"32\"></img> Insomnia | From Insomnia preferences, locate the \"Import data\" option, choose \"From URL\", and paste this URL `https://docs.ship24.com/assets/openapi/ship24-tracking-api.yaml` |
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ship24\TrackingApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ship24\TrackingApi\ApiException;
use Ship24\TrackingApi\Configuration;
use Ship24\TrackingApi\HeaderSelector;
use Ship24\TrackingApi\ObjectSerializer;

/**
 * TrackersApi Class Doc Comment
 *
 * @category Class
 * @package  Ship24\TrackingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TrackersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'bulkCreateTrackers' => [
            'application/json',
        ],
        'createTracker' => [
            'application/json',
        ],
        'createTrackerAndGetTrackingResults' => [
            'application/json',
        ],
        'getTrackerByTrackerId' => [
            'application/json',
        ],
        'getTrackingResultsOfTrackerByTrackerId' => [
            'application/json',
        ],
        'getTrackingResultsOfTrackersByTrackingNumber' => [
            'application/json',
        ],
        'listTrackers' => [
            'application/json',
        ],
        'resendWebhooks' => [
            'application/json',
        ],
        'updateTrackerByTrackerId' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bulkCreateTrackers
     *
     * Bulk create trackers
     *
     * @param  string $content_type application/json; charset&#x3D;utf-8 (required)
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  \Ship24\TrackingApi\Model\BulkCreateTrackersRequest|null $bulk_create_trackers_request bulk_create_trackers_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkCreateTrackers'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ship24\TrackingApi\Model\BulkCreateTrackersResponse|\Ship24\TrackingApi\Model\BulkCreateTrackersResponse|\Ship24\TrackingApi\Model\BulkCreateTrackersResponse|\Ship24\TrackingApi\Model\BulkCreateTrackersResponse
     */
    public function bulkCreateTrackers($content_type, $authorization, $bulk_create_trackers_request = null, string $contentType = self::contentTypes['bulkCreateTrackers'][0])
    {
        list($response) = $this->bulkCreateTrackersWithHttpInfo($content_type, $authorization, $bulk_create_trackers_request, $contentType);
        return $response;
    }

    /**
     * Operation bulkCreateTrackersWithHttpInfo
     *
     * Bulk create trackers
     *
     * @param  string $content_type application/json; charset&#x3D;utf-8 (required)
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  \Ship24\TrackingApi\Model\BulkCreateTrackersRequest|null $bulk_create_trackers_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkCreateTrackers'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ship24\TrackingApi\Model\BulkCreateTrackersResponse|\Ship24\TrackingApi\Model\BulkCreateTrackersResponse|\Ship24\TrackingApi\Model\BulkCreateTrackersResponse|\Ship24\TrackingApi\Model\BulkCreateTrackersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkCreateTrackersWithHttpInfo($content_type, $authorization, $bulk_create_trackers_request = null, string $contentType = self::contentTypes['bulkCreateTrackers'][0])
    {
        $request = $this->bulkCreateTrackersRequest($content_type, $authorization, $bulk_create_trackers_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Ship24\TrackingApi\Model\BulkCreateTrackersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ship24\TrackingApi\Model\BulkCreateTrackersResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ship24\TrackingApi\Model\BulkCreateTrackersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 207:
                    if ('\Ship24\TrackingApi\Model\BulkCreateTrackersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ship24\TrackingApi\Model\BulkCreateTrackersResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ship24\TrackingApi\Model\BulkCreateTrackersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Ship24\TrackingApi\Model\BulkCreateTrackersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ship24\TrackingApi\Model\BulkCreateTrackersResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ship24\TrackingApi\Model\BulkCreateTrackersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Ship24\TrackingApi\Model\BulkCreateTrackersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ship24\TrackingApi\Model\BulkCreateTrackersResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ship24\TrackingApi\Model\BulkCreateTrackersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Ship24\TrackingApi\Model\BulkCreateTrackersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ship24\TrackingApi\Model\BulkCreateTrackersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 207:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ship24\TrackingApi\Model\BulkCreateTrackersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ship24\TrackingApi\Model\BulkCreateTrackersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ship24\TrackingApi\Model\BulkCreateTrackersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkCreateTrackersAsync
     *
     * Bulk create trackers
     *
     * @param  string $content_type application/json; charset&#x3D;utf-8 (required)
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  \Ship24\TrackingApi\Model\BulkCreateTrackersRequest|null $bulk_create_trackers_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkCreateTrackers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkCreateTrackersAsync($content_type, $authorization, $bulk_create_trackers_request = null, string $contentType = self::contentTypes['bulkCreateTrackers'][0])
    {
        return $this->bulkCreateTrackersAsyncWithHttpInfo($content_type, $authorization, $bulk_create_trackers_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkCreateTrackersAsyncWithHttpInfo
     *
     * Bulk create trackers
     *
     * @param  string $content_type application/json; charset&#x3D;utf-8 (required)
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  \Ship24\TrackingApi\Model\BulkCreateTrackersRequest|null $bulk_create_trackers_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkCreateTrackers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkCreateTrackersAsyncWithHttpInfo($content_type, $authorization, $bulk_create_trackers_request = null, string $contentType = self::contentTypes['bulkCreateTrackers'][0])
    {
        $returnType = '\Ship24\TrackingApi\Model\BulkCreateTrackersResponse';
        $request = $this->bulkCreateTrackersRequest($content_type, $authorization, $bulk_create_trackers_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkCreateTrackers'
     *
     * @param  string $content_type application/json; charset&#x3D;utf-8 (required)
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  \Ship24\TrackingApi\Model\BulkCreateTrackersRequest|null $bulk_create_trackers_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkCreateTrackers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkCreateTrackersRequest($content_type, $authorization, $bulk_create_trackers_request = null, string $contentType = self::contentTypes['bulkCreateTrackers'][0])
    {

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling bulkCreateTrackers'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling bulkCreateTrackers'
            );
        }



        $resourcePath = '/public/v1/trackers/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_create_trackers_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_create_trackers_request));
            } else {
                $httpBody = $bulk_create_trackers_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTracker
     *
     * Create a tracker
     *
     * @param  string $content_type application/json; charset&#x3D;utf-8 (required)
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  \Ship24\TrackingApi\Model\TrackerCreateRequest|null $tracker_create_request tracker_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTracker'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ship24\TrackingApi\Model\CreateTracker201Response|\Ship24\TrackingApi\Model\ErrorResponseFormat
     */
    public function createTracker($content_type, $authorization, $tracker_create_request = null, string $contentType = self::contentTypes['createTracker'][0])
    {
        list($response) = $this->createTrackerWithHttpInfo($content_type, $authorization, $tracker_create_request, $contentType);
        return $response;
    }

    /**
     * Operation createTrackerWithHttpInfo
     *
     * Create a tracker
     *
     * @param  string $content_type application/json; charset&#x3D;utf-8 (required)
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  \Ship24\TrackingApi\Model\TrackerCreateRequest|null $tracker_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTracker'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ship24\TrackingApi\Model\CreateTracker201Response|\Ship24\TrackingApi\Model\ErrorResponseFormat, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTrackerWithHttpInfo($content_type, $authorization, $tracker_create_request = null, string $contentType = self::contentTypes['createTracker'][0])
    {
        $request = $this->createTrackerRequest($content_type, $authorization, $tracker_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Ship24\TrackingApi\Model\CreateTracker201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ship24\TrackingApi\Model\CreateTracker201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ship24\TrackingApi\Model\CreateTracker201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Ship24\TrackingApi\Model\ErrorResponseFormat' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ship24\TrackingApi\Model\ErrorResponseFormat' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ship24\TrackingApi\Model\ErrorResponseFormat', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Ship24\TrackingApi\Model\CreateTracker201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ship24\TrackingApi\Model\CreateTracker201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ship24\TrackingApi\Model\ErrorResponseFormat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTrackerAsync
     *
     * Create a tracker
     *
     * @param  string $content_type application/json; charset&#x3D;utf-8 (required)
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  \Ship24\TrackingApi\Model\TrackerCreateRequest|null $tracker_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTracker'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTrackerAsync($content_type, $authorization, $tracker_create_request = null, string $contentType = self::contentTypes['createTracker'][0])
    {
        return $this->createTrackerAsyncWithHttpInfo($content_type, $authorization, $tracker_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTrackerAsyncWithHttpInfo
     *
     * Create a tracker
     *
     * @param  string $content_type application/json; charset&#x3D;utf-8 (required)
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  \Ship24\TrackingApi\Model\TrackerCreateRequest|null $tracker_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTracker'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTrackerAsyncWithHttpInfo($content_type, $authorization, $tracker_create_request = null, string $contentType = self::contentTypes['createTracker'][0])
    {
        $returnType = '\Ship24\TrackingApi\Model\CreateTracker201Response';
        $request = $this->createTrackerRequest($content_type, $authorization, $tracker_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTracker'
     *
     * @param  string $content_type application/json; charset&#x3D;utf-8 (required)
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  \Ship24\TrackingApi\Model\TrackerCreateRequest|null $tracker_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTracker'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createTrackerRequest($content_type, $authorization, $tracker_create_request = null, string $contentType = self::contentTypes['createTracker'][0])
    {

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling createTracker'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling createTracker'
            );
        }



        $resourcePath = '/public/v1/trackers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tracker_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tracker_create_request));
            } else {
                $httpBody = $tracker_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTrackerAndGetTrackingResults
     *
     * Create a tracker and get tracking results
     *
     * @param  string $content_type application/json; charset&#x3D;utf-8 (required)
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  \Ship24\TrackingApi\Model\TrackerCreateRequest|null $tracker_create_request tracker_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTrackerAndGetTrackingResults'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response
     */
    public function createTrackerAndGetTrackingResults($content_type, $authorization, $tracker_create_request = null, string $contentType = self::contentTypes['createTrackerAndGetTrackingResults'][0])
    {
        list($response) = $this->createTrackerAndGetTrackingResultsWithHttpInfo($content_type, $authorization, $tracker_create_request, $contentType);
        return $response;
    }

    /**
     * Operation createTrackerAndGetTrackingResultsWithHttpInfo
     *
     * Create a tracker and get tracking results
     *
     * @param  string $content_type application/json; charset&#x3D;utf-8 (required)
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  \Ship24\TrackingApi\Model\TrackerCreateRequest|null $tracker_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTrackerAndGetTrackingResults'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTrackerAndGetTrackingResultsWithHttpInfo($content_type, $authorization, $tracker_create_request = null, string $contentType = self::contentTypes['createTrackerAndGetTrackingResults'][0])
    {
        $request = $this->createTrackerAndGetTrackingResultsRequest($content_type, $authorization, $tracker_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTrackerAndGetTrackingResultsAsync
     *
     * Create a tracker and get tracking results
     *
     * @param  string $content_type application/json; charset&#x3D;utf-8 (required)
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  \Ship24\TrackingApi\Model\TrackerCreateRequest|null $tracker_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTrackerAndGetTrackingResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTrackerAndGetTrackingResultsAsync($content_type, $authorization, $tracker_create_request = null, string $contentType = self::contentTypes['createTrackerAndGetTrackingResults'][0])
    {
        return $this->createTrackerAndGetTrackingResultsAsyncWithHttpInfo($content_type, $authorization, $tracker_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTrackerAndGetTrackingResultsAsyncWithHttpInfo
     *
     * Create a tracker and get tracking results
     *
     * @param  string $content_type application/json; charset&#x3D;utf-8 (required)
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  \Ship24\TrackingApi\Model\TrackerCreateRequest|null $tracker_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTrackerAndGetTrackingResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTrackerAndGetTrackingResultsAsyncWithHttpInfo($content_type, $authorization, $tracker_create_request = null, string $contentType = self::contentTypes['createTrackerAndGetTrackingResults'][0])
    {
        $returnType = '\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response';
        $request = $this->createTrackerAndGetTrackingResultsRequest($content_type, $authorization, $tracker_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTrackerAndGetTrackingResults'
     *
     * @param  string $content_type application/json; charset&#x3D;utf-8 (required)
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  \Ship24\TrackingApi\Model\TrackerCreateRequest|null $tracker_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTrackerAndGetTrackingResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createTrackerAndGetTrackingResultsRequest($content_type, $authorization, $tracker_create_request = null, string $contentType = self::contentTypes['createTrackerAndGetTrackingResults'][0])
    {

        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling createTrackerAndGetTrackingResults'
            );
        }

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling createTrackerAndGetTrackingResults'
            );
        }



        $resourcePath = '/public/v1/trackers/track';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tracker_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tracker_create_request));
            } else {
                $httpBody = $tracker_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTrackerByTrackerId
     *
     * Get an existing tracker
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrackerByTrackerId'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ship24\TrackingApi\Model\Tracker|\Ship24\TrackingApi\Model\ErrorResponseFormat
     */
    public function getTrackerByTrackerId($authorization, $tracker_id, $search_by = null, string $contentType = self::contentTypes['getTrackerByTrackerId'][0])
    {
        list($response) = $this->getTrackerByTrackerIdWithHttpInfo($authorization, $tracker_id, $search_by, $contentType);
        return $response;
    }

    /**
     * Operation getTrackerByTrackerIdWithHttpInfo
     *
     * Get an existing tracker
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrackerByTrackerId'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ship24\TrackingApi\Model\Tracker|\Ship24\TrackingApi\Model\ErrorResponseFormat, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTrackerByTrackerIdWithHttpInfo($authorization, $tracker_id, $search_by = null, string $contentType = self::contentTypes['getTrackerByTrackerId'][0])
    {
        $request = $this->getTrackerByTrackerIdRequest($authorization, $tracker_id, $search_by, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Ship24\TrackingApi\Model\Tracker' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ship24\TrackingApi\Model\Tracker' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ship24\TrackingApi\Model\Tracker', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Ship24\TrackingApi\Model\ErrorResponseFormat' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ship24\TrackingApi\Model\ErrorResponseFormat' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ship24\TrackingApi\Model\ErrorResponseFormat', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Ship24\TrackingApi\Model\Tracker';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ship24\TrackingApi\Model\Tracker',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ship24\TrackingApi\Model\ErrorResponseFormat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTrackerByTrackerIdAsync
     *
     * Get an existing tracker
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrackerByTrackerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackerByTrackerIdAsync($authorization, $tracker_id, $search_by = null, string $contentType = self::contentTypes['getTrackerByTrackerId'][0])
    {
        return $this->getTrackerByTrackerIdAsyncWithHttpInfo($authorization, $tracker_id, $search_by, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTrackerByTrackerIdAsyncWithHttpInfo
     *
     * Get an existing tracker
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrackerByTrackerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackerByTrackerIdAsyncWithHttpInfo($authorization, $tracker_id, $search_by = null, string $contentType = self::contentTypes['getTrackerByTrackerId'][0])
    {
        $returnType = '\Ship24\TrackingApi\Model\Tracker';
        $request = $this->getTrackerByTrackerIdRequest($authorization, $tracker_id, $search_by, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTrackerByTrackerId'
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrackerByTrackerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTrackerByTrackerIdRequest($authorization, $tracker_id, $search_by = null, string $contentType = self::contentTypes['getTrackerByTrackerId'][0])
    {

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getTrackerByTrackerId'
            );
        }

        // verify the required parameter 'tracker_id' is set
        if ($tracker_id === null || (is_array($tracker_id) && count($tracker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracker_id when calling getTrackerByTrackerId'
            );
        }



        $resourcePath = '/public/v1/trackers/{trackerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_by,
            'searchBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($tracker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'trackerId' . '}',
                ObjectSerializer::toPathValue($tracker_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTrackingResultsOfTrackerByTrackerId
     *
     * Get tracking results for an existing tracker
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrackingResultsOfTrackerByTrackerId'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response|\Ship24\TrackingApi\Model\ErrorResponseFormat
     */
    public function getTrackingResultsOfTrackerByTrackerId($authorization, $tracker_id, $search_by = null, string $contentType = self::contentTypes['getTrackingResultsOfTrackerByTrackerId'][0])
    {
        list($response) = $this->getTrackingResultsOfTrackerByTrackerIdWithHttpInfo($authorization, $tracker_id, $search_by, $contentType);
        return $response;
    }

    /**
     * Operation getTrackingResultsOfTrackerByTrackerIdWithHttpInfo
     *
     * Get tracking results for an existing tracker
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrackingResultsOfTrackerByTrackerId'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response|\Ship24\TrackingApi\Model\ErrorResponseFormat, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTrackingResultsOfTrackerByTrackerIdWithHttpInfo($authorization, $tracker_id, $search_by = null, string $contentType = self::contentTypes['getTrackingResultsOfTrackerByTrackerId'][0])
    {
        $request = $this->getTrackingResultsOfTrackerByTrackerIdRequest($authorization, $tracker_id, $search_by, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Ship24\TrackingApi\Model\ErrorResponseFormat' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ship24\TrackingApi\Model\ErrorResponseFormat' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ship24\TrackingApi\Model\ErrorResponseFormat', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ship24\TrackingApi\Model\ErrorResponseFormat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTrackingResultsOfTrackerByTrackerIdAsync
     *
     * Get tracking results for an existing tracker
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrackingResultsOfTrackerByTrackerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackingResultsOfTrackerByTrackerIdAsync($authorization, $tracker_id, $search_by = null, string $contentType = self::contentTypes['getTrackingResultsOfTrackerByTrackerId'][0])
    {
        return $this->getTrackingResultsOfTrackerByTrackerIdAsyncWithHttpInfo($authorization, $tracker_id, $search_by, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTrackingResultsOfTrackerByTrackerIdAsyncWithHttpInfo
     *
     * Get tracking results for an existing tracker
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrackingResultsOfTrackerByTrackerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackingResultsOfTrackerByTrackerIdAsyncWithHttpInfo($authorization, $tracker_id, $search_by = null, string $contentType = self::contentTypes['getTrackingResultsOfTrackerByTrackerId'][0])
    {
        $returnType = '\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response';
        $request = $this->getTrackingResultsOfTrackerByTrackerIdRequest($authorization, $tracker_id, $search_by, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTrackingResultsOfTrackerByTrackerId'
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrackingResultsOfTrackerByTrackerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTrackingResultsOfTrackerByTrackerIdRequest($authorization, $tracker_id, $search_by = null, string $contentType = self::contentTypes['getTrackingResultsOfTrackerByTrackerId'][0])
    {

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getTrackingResultsOfTrackerByTrackerId'
            );
        }

        // verify the required parameter 'tracker_id' is set
        if ($tracker_id === null || (is_array($tracker_id) && count($tracker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracker_id when calling getTrackingResultsOfTrackerByTrackerId'
            );
        }



        $resourcePath = '/public/v1/trackers/{trackerId}/results';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_by,
            'searchBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($tracker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'trackerId' . '}',
                ObjectSerializer::toPathValue($tracker_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTrackingResultsOfTrackersByTrackingNumber
     *
     * Get tracking results for existing trackers by tracking number
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracking_number **Required** Tracking number of the parcel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrackingResultsOfTrackersByTrackingNumber'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response
     */
    public function getTrackingResultsOfTrackersByTrackingNumber($authorization, $tracking_number, string $contentType = self::contentTypes['getTrackingResultsOfTrackersByTrackingNumber'][0])
    {
        list($response) = $this->getTrackingResultsOfTrackersByTrackingNumberWithHttpInfo($authorization, $tracking_number, $contentType);
        return $response;
    }

    /**
     * Operation getTrackingResultsOfTrackersByTrackingNumberWithHttpInfo
     *
     * Get tracking results for existing trackers by tracking number
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracking_number **Required** Tracking number of the parcel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrackingResultsOfTrackersByTrackingNumber'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTrackingResultsOfTrackersByTrackingNumberWithHttpInfo($authorization, $tracking_number, string $contentType = self::contentTypes['getTrackingResultsOfTrackersByTrackingNumber'][0])
    {
        $request = $this->getTrackingResultsOfTrackersByTrackingNumberRequest($authorization, $tracking_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTrackingResultsOfTrackersByTrackingNumberAsync
     *
     * Get tracking results for existing trackers by tracking number
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracking_number **Required** Tracking number of the parcel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrackingResultsOfTrackersByTrackingNumber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackingResultsOfTrackersByTrackingNumberAsync($authorization, $tracking_number, string $contentType = self::contentTypes['getTrackingResultsOfTrackersByTrackingNumber'][0])
    {
        return $this->getTrackingResultsOfTrackersByTrackingNumberAsyncWithHttpInfo($authorization, $tracking_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTrackingResultsOfTrackersByTrackingNumberAsyncWithHttpInfo
     *
     * Get tracking results for existing trackers by tracking number
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracking_number **Required** Tracking number of the parcel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrackingResultsOfTrackersByTrackingNumber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrackingResultsOfTrackersByTrackingNumberAsyncWithHttpInfo($authorization, $tracking_number, string $contentType = self::contentTypes['getTrackingResultsOfTrackersByTrackingNumber'][0])
    {
        $returnType = '\Ship24\TrackingApi\Model\CreateTrackerAndGetTrackingResults200Response';
        $request = $this->getTrackingResultsOfTrackersByTrackingNumberRequest($authorization, $tracking_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTrackingResultsOfTrackersByTrackingNumber'
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracking_number **Required** Tracking number of the parcel. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTrackingResultsOfTrackersByTrackingNumber'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTrackingResultsOfTrackersByTrackingNumberRequest($authorization, $tracking_number, string $contentType = self::contentTypes['getTrackingResultsOfTrackersByTrackingNumber'][0])
    {

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getTrackingResultsOfTrackersByTrackingNumber'
            );
        }

        // verify the required parameter 'tracking_number' is set
        if ($tracking_number === null || (is_array($tracking_number) && count($tracking_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracking_number when calling getTrackingResultsOfTrackersByTrackingNumber'
            );
        }


        $resourcePath = '/public/v1/trackers/search/{trackingNumber}/results';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($tracking_number !== null) {
            $resourcePath = str_replace(
                '{' . 'trackingNumber' . '}',
                ObjectSerializer::toPathValue($tracking_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTrackers
     *
     * List existing Trackers
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  int $page The page index, starting from 1. (required)
     * @param  int $limit The maximum number of trackers returned per page. (required)
     * @param  int|null $sort Defines the sorting order of trackers. Use &#x60;1&#x60; for ascending (&#x60;createdAt&#x60; oldest first) and &#x60;-1&#x60; for descending (&#x60;createdAt&#x60; newest first). The default is ascending (&#x60;1&#x60;) to ensure stable pagination. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrackers'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ship24\TrackingApi\Model\ListTrackers200Response
     */
    public function listTrackers($authorization, $page, $limit, $sort = null, string $contentType = self::contentTypes['listTrackers'][0])
    {
        list($response) = $this->listTrackersWithHttpInfo($authorization, $page, $limit, $sort, $contentType);
        return $response;
    }

    /**
     * Operation listTrackersWithHttpInfo
     *
     * List existing Trackers
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  int $page The page index, starting from 1. (required)
     * @param  int $limit The maximum number of trackers returned per page. (required)
     * @param  int|null $sort Defines the sorting order of trackers. Use &#x60;1&#x60; for ascending (&#x60;createdAt&#x60; oldest first) and &#x60;-1&#x60; for descending (&#x60;createdAt&#x60; newest first). The default is ascending (&#x60;1&#x60;) to ensure stable pagination. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrackers'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ship24\TrackingApi\Model\ListTrackers200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTrackersWithHttpInfo($authorization, $page, $limit, $sort = null, string $contentType = self::contentTypes['listTrackers'][0])
    {
        $request = $this->listTrackersRequest($authorization, $page, $limit, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Ship24\TrackingApi\Model\ListTrackers200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ship24\TrackingApi\Model\ListTrackers200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ship24\TrackingApi\Model\ListTrackers200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Ship24\TrackingApi\Model\ListTrackers200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ship24\TrackingApi\Model\ListTrackers200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTrackersAsync
     *
     * List existing Trackers
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  int $page The page index, starting from 1. (required)
     * @param  int $limit The maximum number of trackers returned per page. (required)
     * @param  int|null $sort Defines the sorting order of trackers. Use &#x60;1&#x60; for ascending (&#x60;createdAt&#x60; oldest first) and &#x60;-1&#x60; for descending (&#x60;createdAt&#x60; newest first). The default is ascending (&#x60;1&#x60;) to ensure stable pagination. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrackers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTrackersAsync($authorization, $page, $limit, $sort = null, string $contentType = self::contentTypes['listTrackers'][0])
    {
        return $this->listTrackersAsyncWithHttpInfo($authorization, $page, $limit, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTrackersAsyncWithHttpInfo
     *
     * List existing Trackers
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  int $page The page index, starting from 1. (required)
     * @param  int $limit The maximum number of trackers returned per page. (required)
     * @param  int|null $sort Defines the sorting order of trackers. Use &#x60;1&#x60; for ascending (&#x60;createdAt&#x60; oldest first) and &#x60;-1&#x60; for descending (&#x60;createdAt&#x60; newest first). The default is ascending (&#x60;1&#x60;) to ensure stable pagination. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrackers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTrackersAsyncWithHttpInfo($authorization, $page, $limit, $sort = null, string $contentType = self::contentTypes['listTrackers'][0])
    {
        $returnType = '\Ship24\TrackingApi\Model\ListTrackers200Response';
        $request = $this->listTrackersRequest($authorization, $page, $limit, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTrackers'
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  int $page The page index, starting from 1. (required)
     * @param  int $limit The maximum number of trackers returned per page. (required)
     * @param  int|null $sort Defines the sorting order of trackers. Use &#x60;1&#x60; for ascending (&#x60;createdAt&#x60; oldest first) and &#x60;-1&#x60; for descending (&#x60;createdAt&#x60; newest first). The default is ascending (&#x60;1&#x60;) to ensure stable pagination. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrackers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listTrackersRequest($authorization, $page, $limit, $sort = null, string $contentType = self::contentTypes['listTrackers'][0])
    {

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling listTrackers'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling listTrackers'
            );
        }
        if ($page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling TrackersApi.listTrackers, must be bigger than or equal to 1.');
        }
        
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling listTrackers'
            );
        }
        if ($limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling TrackersApi.listTrackers, must be smaller than or equal to 500.');
        }
        if ($limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling TrackersApi.listTrackers, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/public/v1/trackers/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', 'multipart/form-data', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resendWebhooks
     *
     * Resend webhooks of an existing tracker
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendWebhooks'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ship24\TrackingApi\Model\ResendWebhooks201Response
     */
    public function resendWebhooks($authorization, $tracker_id, $search_by = null, string $contentType = self::contentTypes['resendWebhooks'][0])
    {
        list($response) = $this->resendWebhooksWithHttpInfo($authorization, $tracker_id, $search_by, $contentType);
        return $response;
    }

    /**
     * Operation resendWebhooksWithHttpInfo
     *
     * Resend webhooks of an existing tracker
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendWebhooks'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ship24\TrackingApi\Model\ResendWebhooks201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function resendWebhooksWithHttpInfo($authorization, $tracker_id, $search_by = null, string $contentType = self::contentTypes['resendWebhooks'][0])
    {
        $request = $this->resendWebhooksRequest($authorization, $tracker_id, $search_by, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Ship24\TrackingApi\Model\ResendWebhooks201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ship24\TrackingApi\Model\ResendWebhooks201Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ship24\TrackingApi\Model\ResendWebhooks201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Ship24\TrackingApi\Model\ResendWebhooks201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ship24\TrackingApi\Model\ResendWebhooks201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resendWebhooksAsync
     *
     * Resend webhooks of an existing tracker
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendWebhooks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resendWebhooksAsync($authorization, $tracker_id, $search_by = null, string $contentType = self::contentTypes['resendWebhooks'][0])
    {
        return $this->resendWebhooksAsyncWithHttpInfo($authorization, $tracker_id, $search_by, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resendWebhooksAsyncWithHttpInfo
     *
     * Resend webhooks of an existing tracker
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendWebhooks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resendWebhooksAsyncWithHttpInfo($authorization, $tracker_id, $search_by = null, string $contentType = self::contentTypes['resendWebhooks'][0])
    {
        $returnType = '\Ship24\TrackingApi\Model\ResendWebhooks201Response';
        $request = $this->resendWebhooksRequest($authorization, $tracker_id, $search_by, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resendWebhooks'
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendWebhooks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resendWebhooksRequest($authorization, $tracker_id, $search_by = null, string $contentType = self::contentTypes['resendWebhooks'][0])
    {

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling resendWebhooks'
            );
        }

        // verify the required parameter 'tracker_id' is set
        if ($tracker_id === null || (is_array($tracker_id) && count($tracker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracker_id when calling resendWebhooks'
            );
        }



        $resourcePath = '/public/v1/trackers/{trackerId}/webhook-events/resend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_by,
            'searchBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($tracker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'trackerId' . '}',
                ObjectSerializer::toPathValue($tracker_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTrackerByTrackerId
     *
     * Update an existing tracker
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $content_type application/json; charset&#x3D;utf-8 (optional)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  \Ship24\TrackingApi\Model\UpdateTrackerByTrackerIdRequest|null $update_tracker_by_tracker_id_request Only the following property can be updated on a Tracker: (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrackerByTrackerId'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ship24\TrackingApi\Model\Tracker|\Ship24\TrackingApi\Model\ErrorResponseFormat
     */
    public function updateTrackerByTrackerId($authorization, $tracker_id, $content_type = null, $search_by = null, $update_tracker_by_tracker_id_request = null, string $contentType = self::contentTypes['updateTrackerByTrackerId'][0])
    {
        list($response) = $this->updateTrackerByTrackerIdWithHttpInfo($authorization, $tracker_id, $content_type, $search_by, $update_tracker_by_tracker_id_request, $contentType);
        return $response;
    }

    /**
     * Operation updateTrackerByTrackerIdWithHttpInfo
     *
     * Update an existing tracker
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $content_type application/json; charset&#x3D;utf-8 (optional)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  \Ship24\TrackingApi\Model\UpdateTrackerByTrackerIdRequest|null $update_tracker_by_tracker_id_request Only the following property can be updated on a Tracker: (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrackerByTrackerId'] to see the possible values for this operation
     *
     * @throws \Ship24\TrackingApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ship24\TrackingApi\Model\Tracker|\Ship24\TrackingApi\Model\ErrorResponseFormat, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTrackerByTrackerIdWithHttpInfo($authorization, $tracker_id, $content_type = null, $search_by = null, $update_tracker_by_tracker_id_request = null, string $contentType = self::contentTypes['updateTrackerByTrackerId'][0])
    {
        $request = $this->updateTrackerByTrackerIdRequest($authorization, $tracker_id, $content_type, $search_by, $update_tracker_by_tracker_id_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Ship24\TrackingApi\Model\Tracker' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ship24\TrackingApi\Model\Tracker' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ship24\TrackingApi\Model\Tracker', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Ship24\TrackingApi\Model\ErrorResponseFormat' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Ship24\TrackingApi\Model\ErrorResponseFormat' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Ship24\TrackingApi\Model\ErrorResponseFormat', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Ship24\TrackingApi\Model\Tracker';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ship24\TrackingApi\Model\Tracker',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ship24\TrackingApi\Model\ErrorResponseFormat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTrackerByTrackerIdAsync
     *
     * Update an existing tracker
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $content_type application/json; charset&#x3D;utf-8 (optional)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  \Ship24\TrackingApi\Model\UpdateTrackerByTrackerIdRequest|null $update_tracker_by_tracker_id_request Only the following property can be updated on a Tracker: (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrackerByTrackerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTrackerByTrackerIdAsync($authorization, $tracker_id, $content_type = null, $search_by = null, $update_tracker_by_tracker_id_request = null, string $contentType = self::contentTypes['updateTrackerByTrackerId'][0])
    {
        return $this->updateTrackerByTrackerIdAsyncWithHttpInfo($authorization, $tracker_id, $content_type, $search_by, $update_tracker_by_tracker_id_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTrackerByTrackerIdAsyncWithHttpInfo
     *
     * Update an existing tracker
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $content_type application/json; charset&#x3D;utf-8 (optional)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  \Ship24\TrackingApi\Model\UpdateTrackerByTrackerIdRequest|null $update_tracker_by_tracker_id_request Only the following property can be updated on a Tracker: (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrackerByTrackerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTrackerByTrackerIdAsyncWithHttpInfo($authorization, $tracker_id, $content_type = null, $search_by = null, $update_tracker_by_tracker_id_request = null, string $contentType = self::contentTypes['updateTrackerByTrackerId'][0])
    {
        $returnType = '\Ship24\TrackingApi\Model\Tracker';
        $request = $this->updateTrackerByTrackerIdRequest($authorization, $tracker_id, $content_type, $search_by, $update_tracker_by_tracker_id_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTrackerByTrackerId'
     *
     * @param  string $authorization Your &#x60;api_key&#x60; prefixed with &#x60;Bearer&#x60;. (required)
     * @param  string $tracker_id **Required** Id of the tracker, provided by Ship24 at creation. &#x60;clientTrackerId&#x60; can also be used in this field by employing the &#x60;searchBy&#x60; parameter. (required)
     * @param  string|null $content_type application/json; charset&#x3D;utf-8 (optional)
     * @param  string|null $search_by Parameter allowing to search either by &#x60;trackerId&#x60;or &#x60;clientTrackerId&#x60;. Default behavior is by &#x60;trackerId&#x60;. (optional)
     * @param  \Ship24\TrackingApi\Model\UpdateTrackerByTrackerIdRequest|null $update_tracker_by_tracker_id_request Only the following property can be updated on a Tracker: (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrackerByTrackerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTrackerByTrackerIdRequest($authorization, $tracker_id, $content_type = null, $search_by = null, $update_tracker_by_tracker_id_request = null, string $contentType = self::contentTypes['updateTrackerByTrackerId'][0])
    {

        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateTrackerByTrackerId'
            );
        }

        // verify the required parameter 'tracker_id' is set
        if ($tracker_id === null || (is_array($tracker_id) && count($tracker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracker_id when calling updateTrackerByTrackerId'
            );
        }





        $resourcePath = '/public/v1/trackers/{trackerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_by,
            'searchBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($tracker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'trackerId' . '}',
                ObjectSerializer::toPathValue($tracker_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_tracker_by_tracker_id_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_tracker_by_tracker_id_request));
            } else {
                $httpBody = $update_tracker_by_tracker_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
